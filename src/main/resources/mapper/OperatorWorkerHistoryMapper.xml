<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xnpool.setting.domain.mapper.OperatorWorkerHistoryMapper">
  <resultMap id="BaseResultMap" type="com.xnpool.setting.domain.pojo.OperatorWorkerHistory">
    <!--@mbg.generated-->
    <!--@Table operator_worker_history-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="mineId" jdbcType="INTEGER" property="mineid" />
    <result column="workerId" jdbcType="INTEGER" property="workerid" />
    <result column="moveOutTime" jdbcType="TIMESTAMP" property="moveouttime" />
    <result column="comeInTime" jdbcType="TIMESTAMP" property="comeintime" />
    <result column="reason" jdbcType="VARCHAR" property="reason" />
    <result column="operatorId" jdbcType="INTEGER" property="operatorid" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, mineId, workerId, moveOutTime, comeInTime, reason, operatorId
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from operator_worker_history
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from operator_worker_history
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.xnpool.setting.domain.pojo.OperatorWorkerHistory" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into operator_worker_history (mineId, workerId, moveOutTime, 
      comeInTime, reason, operatorId
      )
    values (#{mineid,jdbcType=INTEGER}, #{workerid,jdbcType=INTEGER}, #{moveouttime,jdbcType=TIMESTAMP}, 
      #{comeintime,jdbcType=TIMESTAMP}, #{reason,jdbcType=VARCHAR}, #{operatorid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.xnpool.setting.domain.pojo.OperatorWorkerHistory" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into operator_worker_history
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="mineid != null">
        mineId,
      </if>
      <if test="workerid != null">
        workerId,
      </if>
      <if test="moveouttime != null">
        moveOutTime,
      </if>
      <if test="comeintime != null">
        comeInTime,
      </if>
      <if test="reason != null">
        reason,
      </if>
      <if test="operatorid != null">
        operatorId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="mineid != null">
        #{mineid,jdbcType=INTEGER},
      </if>
      <if test="workerid != null">
        #{workerid,jdbcType=INTEGER},
      </if>
      <if test="moveouttime != null">
        #{moveouttime,jdbcType=TIMESTAMP},
      </if>
      <if test="comeintime != null">
        #{comeintime,jdbcType=TIMESTAMP},
      </if>
      <if test="reason != null">
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="operatorid != null">
        #{operatorid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xnpool.setting.domain.pojo.OperatorWorkerHistory">
    <!--@mbg.generated-->
    update operator_worker_history
    <set>
      <if test="mineid != null">
        mineId = #{mineid,jdbcType=INTEGER},
      </if>
      <if test="workerid != null">
        workerId = #{workerid,jdbcType=INTEGER},
      </if>
      <if test="moveouttime != null">
        moveOutTime = #{moveouttime,jdbcType=TIMESTAMP},
      </if>
      <if test="comeintime != null">
        comeInTime = #{comeintime,jdbcType=TIMESTAMP},
      </if>
      <if test="reason != null">
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="operatorid != null">
        operatorId = #{operatorid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xnpool.setting.domain.pojo.OperatorWorkerHistory">
    <!--@mbg.generated-->
    update operator_worker_history
    set mineId = #{mineid,jdbcType=INTEGER},
      workerId = #{workerid,jdbcType=INTEGER},
      moveOutTime = #{moveouttime,jdbcType=TIMESTAMP},
      comeInTime = #{comeintime,jdbcType=TIMESTAMP},
      reason = #{reason,jdbcType=VARCHAR},
      operatorId = #{operatorid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <!--  批量记录矿机出库历史-->
    <insert id="insertTobatch" parameterType="java.util.List">
        insert into operator_worker_history (workerId, moveOutTime, reason, `operatorId`,mineId)
        values
      <foreach collection="list" index="index" item="item" separator=",">
        (#{item,jdbcType=BIGINT},now(),#{reason,jdbcType=VARCHAR},#{operatorId,jdbcType=INTEGER},#{mineId,jdbcType=INTEGER})
      </foreach>
    </insert>

<!--    出库记录-->
    <select id="selectWorkerHistoryList" resultType="com.xnpool.setting.domain.pojo.OperatorWorkerHistoryExample">
      SELECT
      operator_worker_history.id,
      factory_house.factoryName,
      frame_setting.detailed,
      worker_detailed.workerId,
      worker.miner,
      worker.workerName,
      group_setting.groupName,
      DATE_FORMAT( operator_worker_history.moveOutTime, '%Y-%m-%d %H:%i:%s' )AS moveouttime,
      DATE_FORMAT( operator_worker_history.comeInTime, '%Y-%m-%d %H:%i:%s' )AS comeintime,
      operator_worker_history.reason,
      operator_worker_history.operatorId
      FROM
      operator_worker_history,
      worker_detailed,
      worker,
      factory_house,
      frame_setting,
      group_setting
      <where>
        operator_worker_history.workerId = worker_detailed.workerId
        AND worker_detailed.workerId = worker.id
        AND worker_detailed.factoryId = factory_house.id
        AND worker_detailed.frameId = frame_setting.id
        AND worker_detailed.groupId = group_setting.groupId
        <if test="startTime != null">
          AND operator_worker_history.moveOutTime > #{startTime}
        </if>
        <if test="endTime != null">
          AND operator_worker_history.moveOutTime &lt; #{startTime}
        </if>
        <if test="keyword != null">
          AND operator_worker_history.reason like #{keyword}
        </if>
      </where>
    </select>
  <!--修改入库时间-->
  <update id="updateComeInTimeById">
    update operator_worker_history set  comeInTime = now() where  workerId in
    <foreach close=")" collection="list" index="index" item="item" open="(" separator=",">
      #{item,jdbcType=BIGINT}
    </foreach>
    AND comeInTime IS NULL
  </update>
</mapper>